{"version":3,"file":"Settings-w5VArJpg.js","sources":["../../node_modules/idb/build/index.js","../../src/services/storageService.ts","../../src/components/Settings/SettingsGroup.tsx","../../src/components/ui/switch.tsx","../../src/components/Settings/SettingsItem.tsx","../../src/hooks/useDataExport.ts","../../src/components/data/ExportModal.tsx","../../src/pages/Settings.tsx","../../src/hooks/useSettings.ts"],"sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","import { openDB, DBSchema, IDBPDatabase } from 'idb';\nimport { Plant } from '../schemas';\n\ninterface PlantCareDB extends DBSchema {\n  plants: {\n    key: string;\n    value: Plant;\n    indexes: { 'by-health': number; 'by-date': Date };\n  };\n  images: {\n    key: string;\n    value: { id: string; plantId: string; blob: Blob; timestamp: Date };\n  };\n  settings: {\n    key: string;\n    value: any;\n  };\n}\n\nclass StorageService {\n  private db: IDBPDatabase<PlantCareDB> | null = null;\n\n  async init() {\n    if (this.db) return this.db;\n\n    this.db = await openDB<PlantCareDB>('PlantCareDB', 1, {\n      upgrade(db) {\n        // Plants store\n        const plantStore = db.createObjectStore('plants', { keyPath: 'id' });\n        plantStore.createIndex('by-health', 'healthScore');\n        plantStore.createIndex('by-date', 'dateAdded');\n\n        // Images store for offline caching\n        db.createObjectStore('images', { keyPath: 'id' });\n\n        // Settings store\n        db.createObjectStore('settings', { keyPath: 'key' });\n      },\n    });\n\n    return this.db;\n  }\n\n  async savePlant(plant: Plant): Promise<void> {\n    const db = await this.init();\n    await db.put('plants', plant);\n    \n    // Also save to localStorage as backup\n    const plants = await this.getAllPlants();\n    localStorage.setItem('plants', JSON.stringify(plants));\n  }\n\n  async getPlant(id: string): Promise<Plant | undefined> {\n    const db = await this.init();\n    return await db.get('plants', id);\n  }\n\n  async getAllPlants(): Promise<Plant[]> {\n    const db = await this.init();\n    const plants = await db.getAll('plants');\n    \n    // Convert date strings back to Date objects\n    return plants.map(plant => ({\n      ...plant,\n      dateAdded: new Date(plant.dateAdded),\n      lastWatered: plant.lastWatered ? new Date(plant.lastWatered) : undefined,\n      lastFertilized: plant.lastFertilized ? new Date(plant.lastFertilized) : undefined,\n      images: plant.images.map(img => ({\n        ...img,\n        timestamp: new Date(img.timestamp),\n      })),\n      chatHistory: plant.chatHistory.map(msg => ({\n        ...msg,\n        timestamp: new Date(msg.timestamp),\n      })),\n      notifications: plant.notifications.map(notif => ({\n        ...notif,\n        scheduledFor: new Date(notif.scheduledFor),\n      })),\n    }));\n  }\n\n  async deletePlant(id: string): Promise<void> {\n    const db = await this.init();\n    await db.delete('plants', id);\n    \n    // Update localStorage backup\n    const plants = await this.getAllPlants();\n    localStorage.setItem('plants', JSON.stringify(plants));\n  }\n\n  async saveImageBlob(imageId: string, plantId: string, blob: Blob): Promise<void> {\n    const db = await this.init();\n    await db.put('images', {\n      id: imageId,\n      plantId,\n      blob,\n      timestamp: new Date(),\n    });\n  }\n\n  async getImageBlob(imageId: string): Promise<Blob | undefined> {\n    const db = await this.init();\n    const result = await db.get('images', imageId);\n    return result?.blob;\n  }\n\n  async saveSetting(key: string, value: any): Promise<void> {\n    const db = await this.init();\n    await db.put('settings', { key, value });\n  }\n\n  async getSetting(key: string): Promise<any> {\n    const db = await this.init();\n    const result = await db.get('settings', key);\n    return result?.value;\n  }\n\n  async exportData(): Promise<string> {\n    const plants = await this.getAllPlants();\n    const settings = {\n      theme: await this.getSetting('theme'),\n      notifications: await this.getSetting('notifications'),\n    };\n\n    return JSON.stringify({\n      plants,\n      settings,\n      exportDate: new Date().toISOString(),\n      version: '1.0.0',\n    }, null, 2);\n  }\n\n  async importData(jsonData: string): Promise<void> {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.plants) {\n        for (const plant of data.plants) {\n          await this.savePlant(plant);\n        }\n      }\n\n      if (data.settings) {\n        for (const [key, value] of Object.entries(data.settings)) {\n          if (value !== undefined) {\n            await this.saveSetting(key, value);\n          }\n        }\n      }\n    } catch (error) {\n      throw new Error('Invalid data format');\n    }\n  }\n\n  async clearAllData(): Promise<void> {\n    const db = await this.init();\n    await db.clear('plants');\n    await db.clear('images');\n    await db.clear('settings');\n    localStorage.removeItem('plants');\n  }\n}\n\nexport const storageService = new StorageService();","import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface SettingsGroupProps {\n  title: string;\n  children: React.ReactNode;\n  delay?: number;\n}\n\nconst SettingsGroup = ({ title, children, delay = 0 }: SettingsGroupProps) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: delay * 0.1 }}\n      className=\"space-y-3\"\n    >\n      <h2 className=\"text-lg font-bold text-foreground px-4\">\n        {title}\n      </h2>\n      <div className=\"bg-muted/50 rounded-2xl overflow-hidden\">\n        {children}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default SettingsGroup; ","\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-7 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-6 w-6 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch } ","import React from 'react';\nimport { ChevronRight } from 'lucide-react';\nimport { cn } from '../../lib/utils';\nimport { Switch } from '../ui/switch'; // Assuming you have a Switch component\n\ninterface SettingsItemProps {\n  icon: React.ElementType;\n  label: string;\n  value?: string;\n  onClick?: () => void;\n  isLast?: boolean;\n  type?: 'button' | 'toggle'; // Mantener toggle solo para theme\n  disabled?: boolean;\n  toggleState?: boolean;\n  onToggleChange?: (checked: boolean) => void;\n}\n\nconst SettingsItem = ({\n  icon: Icon,\n  label,\n  value,\n  onClick,\n  isLast = false,\n  type = 'button',\n  disabled = false,\n  toggleState = false,\n  onToggleChange,\n}: SettingsItemProps) => {\n  const switchId = React.useId();\n\n  const content = (\n    <>\n      <div className=\"flex items-center gap-4\">\n        <div className=\"flex h-8 w-8 items-center justify-center rounded-lg bg-background\">\n          <Icon size={18} className=\"text-muted-foreground\" />\n        </div>\n        <span className=\"font-medium text-foreground\">{label}</span>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        {type === 'button' && (\n          <>\n            {value && <span className=\"text-sm text-muted-foreground\">{value}</span>}\n            <ChevronRight size={16} className=\"text-muted-foreground/50\" />\n          </>\n        )}\n        {type === 'toggle' && (\n          <Switch\n            id={switchId}\n            checked={toggleState}\n            onCheckedChange={onToggleChange}\n            aria-label={label}\n          />\n        )}\n      </div>\n    </>\n  );\n\n  const itemClasses = cn(\n    'flex w-full items-center justify-between p-3 text-left',\n    !isLast && 'border-b border-background',\n    onClick && 'transition-colors hover:bg-background/50'\n  );\n\n  if (type === 'button') {\n    return (\n      <button onClick={onClick} className={itemClasses} disabled={disabled}>\n        {content}\n      </button>\n    );\n  }\n\n  return (\n    <label htmlFor={switchId} className={cn(itemClasses, 'cursor-pointer')}>\n      {content}\n    </label>\n  );\n};\n\nexport default SettingsItem; ","import { useState } from 'react';\nimport { usePlantsQuery } from './usePlantsQuery';\n// import { Plant } from '../schemas'; // Commented out as it's not directly used\n\ninterface ExportOptions {\n  format: 'json' | 'csv';\n  includeImages: boolean;\n  includeChats: boolean;\n}\n\ninterface ExportData {\n  exportDate: string;\n  plantCount: number;\n  plants: any[];\n  metadata: {\n    version: string;\n    source: 'Plant Care Companion';\n  };\n}\n\nexport const useDataExport = () => {\n  const [isExporting, setIsExporting] = useState(false);\n  const { data: plants = [] } = usePlantsQuery();\n\n  const formatDate = (date: Date): string => {\n    return date.toISOString().split('T')[0];\n  };\n\n  const sanitizeForCSV = (value: any): string => {\n    if (value === null || value === undefined) return '';\n    const str = String(value);\n    // Escape commas and quotes\n    if (str.includes(',') || str.includes('\"') || str.includes('\\n')) {\n      return `\"${str.replace(/\"/g, '\"\"')}\"`;\n    }\n    return str;\n  };\n\n  const exportToJSON = async (options: ExportOptions): Promise<void> => {\n    setIsExporting(true);\n    \n    try {\n      const exportData: ExportData = {\n        exportDate: new Date().toISOString(),\n        plantCount: plants.length,\n        plants: plants.map(plant => ({\n          id: plant.id,\n          name: plant.name,\n          nickname: plant.nickname,\n          species: plant.species,\n          location: plant.location,\n          plantEnvironment: plant.plantEnvironment,\n          lightRequirements: plant.lightRequirements,\n          healthScore: plant.healthScore,\n          lastWatered: plant.lastWatered?.toISOString(),\n          // Note: Some fields may not be available in current schema\n          ...(options.includeImages && {\n            profileImageUrl: plant.profileImageUrl\n          }),\n          // Placeholder for future chat integration\n          ...(options.includeChats && {\n            chatHistory: [] // Will be implemented when chat history is available\n          })\n        })),\n        metadata: {\n          version: '1.0.0',\n          source: 'Plant Care Companion'\n        }\n      };\n\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n        type: 'application/json'\n      });\n      \n      downloadFile(blob, `plantas-backup-${formatDate(new Date())}.json`);\n    } catch (error) {\n      console.error('Error exporting to JSON:', error);\n      throw new Error('Failed to export data as JSON');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const exportToCSV = async (options: ExportOptions): Promise<void> => {\n    setIsExporting(true);\n    \n    try {\n      const headers = [\n        'ID',\n        'Nombre',\n        'Apodo',\n        'Especie',\n        'Ubicación',\n        'Ambiente',\n        'Luz Requerida',\n        'Puntuación Salud',\n        'Último Riego'\n      ];\n\n              if (options.includeImages) {\n          headers.push('Imagen Principal');\n        }\n\n      const csvRows = [headers.join(',')];\n      \n      plants.forEach(plant => {\n        const row = [\n          sanitizeForCSV(plant.id),\n          sanitizeForCSV(plant.name),\n          sanitizeForCSV(plant.nickname || ''),\n          sanitizeForCSV(plant.species),\n          sanitizeForCSV(plant.location),\n          sanitizeForCSV(plant.plantEnvironment || ''),\n          sanitizeForCSV(plant.lightRequirements || ''),\n          sanitizeForCSV(plant.healthScore || ''),\n          sanitizeForCSV(plant.lastWatered ? formatDate(plant.lastWatered) : '')\n        ];\n\n        if (options.includeImages) {\n          row.push(\n            sanitizeForCSV(plant.profileImageUrl || '')\n          );\n        }\n\n        csvRows.push(row.join(','));\n      });\n\n      const csvContent = csvRows.join('\\n');\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      \n      downloadFile(blob, `plantas-${formatDate(new Date())}.csv`);\n    } catch (error) {\n      console.error('Error exporting to CSV:', error);\n      throw new Error('Failed to export data as CSV');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const downloadFile = (blob: Blob, filename: string): void => {\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const exportData = async (options: ExportOptions): Promise<void> => {\n    if (plants.length === 0) {\n      throw new Error('No hay plantas para exportar');\n    }\n\n    switch (options.format) {\n      case 'json':\n        return exportToJSON(options);\n      case 'csv':\n        return exportToCSV(options);\n      default:\n        throw new Error('Formato de exportación no soportado');\n    }\n  };\n\n  const getExportSize = (): { plantCount: number; estimatedSize: string } => {\n    const estimatedSizeBytes = plants.length * 1024; // Rough estimate: 1KB per plant\n    const estimatedSizeMB = estimatedSizeBytes / (1024 * 1024);\n    \n    return {\n      plantCount: plants.length,\n      estimatedSize: estimatedSizeMB > 1 \n        ? `${estimatedSizeMB.toFixed(1)} MB` \n        : `${Math.round(estimatedSizeBytes / 1024)} KB`\n    };\n  };\n\n  // Auto-backup functionality\n  const createAutoBackup = async (): Promise<void> => {\n    try {\n      const lastBackup = localStorage.getItem('last-auto-backup');\n      const now = new Date().getTime();\n      const oneWeek = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\n\n      if (!lastBackup || (now - parseInt(lastBackup)) > oneWeek) {\n        await exportToJSON({\n          format: 'json',\n          includeImages: false, // Keep auto-backup lightweight\n          includeChats: false\n        });\n        \n        localStorage.setItem('last-auto-backup', now.toString());\n      }\n    } catch (error) {\n      console.warn('Auto-backup failed:', error);\n    }\n  };\n\n  return {\n    exportData,\n    isExporting,\n    getExportSize,\n    createAutoBackup,\n    availableFormats: ['json', 'csv'] as const\n  };\n};","import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Download, \n  X, \n  FileText, \n  Database, \n  Image, \n  MessageCircle,\n  Info,\n} from 'lucide-react';\nimport { Button } from '../ui/Button';\nimport { useDataExport } from '../../hooks/useDataExport';\nimport { useToast } from '../ui/Toast/ToastProvider';\n\ninterface ExportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const ExportModal: React.FC<ExportModalProps> = ({ isOpen, onClose }) => {\n  const [format, setFormat] = useState<'json' | 'csv'>('json');\n  const [includeImages, setIncludeImages] = useState(true);\n  const [includeChats, setIncludeChats] = useState(false);\n  \n  const { exportData, isExporting, getExportSize } = useDataExport();\n  const { showSuccess, showError } = useToast();\n  const { plantCount, estimatedSize } = getExportSize();\n\n  const handleExport = async () => {\n    try {\n      await exportData({\n        format,\n        includeImages,\n        includeChats\n      });\n      \n      showSuccess(\n        'Exportación completada',\n        `Se descargaron los datos de ${plantCount} plantas en formato ${format.toUpperCase()}.`\n      );\n      \n      onClose();\n    } catch (error) {\n      showError(\n        'Error en la exportación',\n        error instanceof Error ? error.message : 'No se pudo completar la exportación.'\n      );\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95, y: 20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.95, y: 20 }}\n          onClick={(e) => e.stopPropagation()}\n          className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl max-w-lg w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center\">\n                  <Download className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                    Exportar Datos\n                  </h2>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                    Descarga una copia de tus datos de plantas\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={onClose}\n                disabled={isExporting}\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors p-1\"\n                aria-label=\"Cerrar modal\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6 space-y-6\">\n            {/* Stats */}\n            <div className=\"bg-gray-50 dark:bg-gray-900/50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Plantas a exportar:</span>\n                <span className=\"font-medium text-gray-900 dark:text-gray-100\">{plantCount}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm mt-2\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Tamaño estimado:</span>\n                <span className=\"font-medium text-gray-900 dark:text-gray-100\">{estimatedSize}</span>\n              </div>\n            </div>\n\n            {/* Format Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Formato de archivo\n              </label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <button\n                  onClick={() => setFormat('json')}\n                  disabled={isExporting}\n                  className={`\n                    p-4 rounded-lg border-2 transition-all text-left\n                    ${format === 'json'\n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                    }\n                  `}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Database className={`w-5 h-5 ${format === 'json' ? 'text-blue-600' : 'text-gray-500'}`} />\n                    <div>\n                      <div className={`font-medium ${format === 'json' ? 'text-blue-900 dark:text-blue-100' : 'text-gray-900 dark:text-gray-100'}`}>\n                        JSON\n                      </div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Completo, reimportable\n                      </div>\n                    </div>\n                  </div>\n                </button>\n\n                <button\n                  onClick={() => setFormat('csv')}\n                  disabled={isExporting}\n                  className={`\n                    p-4 rounded-lg border-2 transition-all text-left\n                    ${format === 'csv'\n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                    }\n                  `}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <FileText className={`w-5 h-5 ${format === 'csv' ? 'text-blue-600' : 'text-gray-500'}`} />\n                    <div>\n                      <div className={`font-medium ${format === 'csv' ? 'text-blue-900 dark:text-blue-100' : 'text-gray-900 dark:text-gray-100'}`}>\n                        CSV\n                      </div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Para Excel/Sheets\n                      </div>\n                    </div>\n                  </div>\n                </button>\n              </div>\n            </div>\n\n            {/* Options */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Incluir en la exportación\n              </label>\n              <div className=\"space-y-3\">\n                <label className=\"flex items-center gap-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeImages}\n                    onChange={(e) => setIncludeImages(e.target.checked)}\n                    disabled={isExporting}\n                    className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                  <Image className=\"w-4 h-4 text-gray-500\" />\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    Metadatos de imágenes\n                  </span>\n                </label>\n\n                <label className=\"flex items-center gap-3 cursor-pointer opacity-50\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeChats}\n                    onChange={(e) => setIncludeChats(e.target.checked)}\n                    disabled={true} // Disabled until chat history is implemented\n                    className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                  <MessageCircle className=\"w-4 h-4 text-gray-500\" />\n                  <span className=\"text-sm text-gray-500\">\n                    Historial de chat (próximamente)\n                  </span>\n                </label>\n              </div>\n            </div>\n\n            {/* Info */}\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n              <div className=\"flex gap-3\">\n                <Info className=\"w-5 h-5 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5\" />\n                <div className=\"text-sm\">\n                  <p className=\"text-blue-800 dark:text-blue-200 font-medium mb-1\">\n                    Sobre la exportación\n                  </p>\n                  <p className=\"text-blue-700 dark:text-blue-300 leading-relaxed\">\n                    Los datos exportados incluyen toda la información de tus plantas: nombres, especies, \n                    cuidados, fechas de riego y ubicaciones. Las imágenes se incluyen como referencias URL.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"p-6 border-t border-gray-200 dark:border-gray-700 flex gap-3 justify-end\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isExporting}\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={handleExport}\n              disabled={isExporting || plantCount === 0}\n              loading={isExporting}\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              {isExporting ? 'Exportando...' : 'Exportar Datos'}\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","import React from 'react';\nimport {\n  User, LogOut, Sun, Moon, Bell, Download, Trash2, HelpCircle, Shield, Info\n} from 'lucide-react';\nimport { useSettings } from '../hooks/useSettings';\nimport { SettingsGroup, SettingsItem } from '../components/Settings';\nimport { ExportModal } from '../components/data/ExportModal';\n\nconst iconMap: { [key: string]: React.ElementType } = {\n  User, LogOut, Sun, Moon, Bell, Download, Trash2, HelpCircle, Shield, Info\n};\n\nconst Settings: React.FC = () => {\n  const { settingsSections, isExportModalOpen, setIsExportModalOpen } = useSettings();\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <header>\n        <h1 className=\"text-3xl font-bold text-foreground\">\n          Configuración\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Gestiona tu cuenta y preferencias de la app.\n        </p>\n      </header>\n\n      {settingsSections.map((section, index) => (\n        <SettingsGroup key={section.title} title={section.title} delay={index}>\n          {section.items.map((item, itemIndex) => {\n            const IconComponent = iconMap[item.icon as string];\n            const isLast = itemIndex === section.items.length - 1;\n\n            if (item.type === 'toggle') {\n              return (\n                <SettingsItem\n                  key={item.id}\n                  icon={IconComponent}\n                  label={item.label}\n                  isLast={isLast}\n                  type=\"toggle\"\n                  toggleState={\"toggleState\" in item ? item.toggleState : false}\n                  onToggleChange={\"onToggleChange\" in item ? item.onToggleChange : undefined}\n                />\n              );\n            }\n            \n            return (\n              <SettingsItem\n                key={item.id}\n                icon={IconComponent}\n                label={item.label}\n                value={\"value\" in item && typeof item.value === 'string' ? item.value : undefined}\n                onClick={\"onClick\" in item ? item.onClick : undefined}\n                isLast={isLast}\n                type=\"button\"\n                disabled={\"disabled\" in item ? item.disabled : false}\n              />\n            );\n          })}\n        </SettingsGroup>\n      ))}\n\n      {/* Export Modal */}\n      <ExportModal \n        isOpen={isExportModalOpen}\n        onClose={() => setIsExportModalOpen(false)}\n      />\n    </div>\n  );\n};\n\nexport default Settings;","import { useMemo, useState } from 'react';\nimport { useThemeStore, useAuthStore } from '../stores';\nimport { storageService } from '../services/storageService';\nimport { useNavigate } from 'react-router-dom';\n\nexport const useSettings = () => {\n  const { isDark, toggleTheme } = useThemeStore();\n  const { signOut, profile } = useAuthStore();\n  const navigate = useNavigate();\n  const [isExportModalOpen, setIsExportModalOpen] = useState(false);\n\n  // Local state for settings that don't have a store\n  // TODO: Reemplazar por lógica real si se requiere\n  const hasDataToExport = true;\n  const hasDataToDelete = true;\n\n  const handleSignOut = async () => {\n    // We should use a custom modal here in a real app\n    if (window.confirm('¿Estás seguro de que quieres cerrar sesión?')) {\n      try {\n        await signOut();\n        navigate('/auth'); // Redirect to auth page after sign out\n      } catch (error) {\n        console.error('Error signing out:', error);\n        // We should show a toast notification here\n      }\n    }\n  };\n\n  \n  const handleExportData = () => {\n    setIsExportModalOpen(true);\n  };\n  \n  const handleClearData = async () => {\n    if (window.confirm('¿Estás seguro de que quieres eliminar todos tus datos? Esta acción es irreversible.')) {\n      try {\n        await storageService.clearAllData();\n        // Show success toast and possibly sign out user\n        await handleSignOut();\n      } catch (error) {\n        console.error('Error clearing data:', error);\n        // Show error toast\n      }\n    }\n  };\n\n  const settingsSections = useMemo(() => [\n    {\n      title: 'Cuenta',\n      items: [\n        {\n          id: 'signout',\n          icon: 'LogOut',\n          label: 'Cerrar sesión',\n          type: 'button',\n          onClick: handleSignOut,\n        },\n      ],\n    },\n    {\n      title: 'Preferencias',\n      items: [\n        {\n          id: 'theme',\n          icon: isDark ? 'Sun' : 'Moon',\n          label: 'Modo Oscuro',\n          type: 'toggle' as const,\n          toggleState: isDark,\n          onToggleChange: toggleTheme,\n        },\n      ],\n    },\n    {\n        title: 'Datos',\n        items: [\n            {\n                id: 'export',\n                icon: 'Download',\n                label: 'Exportar mis datos',\n                type: 'button',\n                onClick: handleExportData,\n                disabled: !profile || !hasDataToExport,\n            },\n            {\n                id: 'delete',\n                icon: 'Trash2',\n                label: 'Eliminar mis datos',\n                type: 'button',\n                onClick: handleClearData,\n                disabled: !profile || !hasDataToDelete,\n            },\n        ],\n    },\n    {\n      title: 'Soporte',\n      items: [\n        // Funciones de soporte temporalmente ocultas - ver ROADMAP.md\n        /* \n        {\n          id: 'help',\n          icon: 'HelpCircle',\n          label: 'Ayuda y FAQ',\n          action: () => { console.log('Navigate to help page'); },\n          type: 'button' as const,\n        },\n        {\n          id: 'privacy',\n          icon: 'Shield',\n          label: 'Política de Privacidad',\n          action: () => { console.log('Navigate to privacy page'); },\n          type: 'button' as const,\n        },\n        {\n          id: 'about',\n          icon: 'Info',\n          label: 'Acerca de Plantitas',\n          value: 'v1.0.0', // This should be dynamic\n          action: () => { console.log('Show about modal'); },\n          type: 'button' as const,\n        }\n        */\n      ],\n    },\n  ], [isDark, profile, handleSignOut, toggleTheme]);\n\n  return {\n    settingsSections,\n    isExportModalOpen,\n    setIsExportModalOpen,\n  };\n}; "],"names":["instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","transactionDoneMap","WeakMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","value","has","replaceTraps","callback","wrapFunction","func","IDBCursor","prototype","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","request","transformCachableValue","tx","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBDatabase","IDBObjectStore","IDBIndex","Proxy","IDBRequest","promise","success","result","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","transaction","store","index","shift","all","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","Symbol","asyncIterator","storageService","db","init","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","then","catch","openDB","plantStore","createObjectStore","keyPath","createIndex","savePlant","plant","put","plants","getAllPlants","localStorage","setItem","JSON","stringify","getPlant","id","getAll","map","dateAdded","Date","lastWatered","lastFertilized","images","img","timestamp","chatHistory","msg","notifications","notif","scheduledFor","deletePlant","saveImageBlob","imageId","plantId","blob","getImageBlob","saveSetting","key","getSetting","exportData","settings","theme","exportDate","toISOString","importData","jsonData","data","parse","Object","entries","Error","clearAllData","clear","removeItem","SettingsGroup_default","title","children","delay","jsxs","motion","div","initial","opacity","y","animate","transition","className","jsx","Switch","React.forwardRef","props","ref","SwitchPrimitives.Root","cn","SwitchPrimitives.Thumb","displayName","SettingsItem_default","icon","Icon","label","onClick","isLast","type","disabled","toggleState","onToggleChange","switchId","React","useId","content","Fragment","size","ChevronRight","checked","onCheckedChange","itemClasses","htmlFor","useDataExport","isExporting","setIsExporting","useState","usePlantsQuery","formatDate","date","split","sanitizeForCSV","str","String","exportToJSON","options","plantCount","length","nickname","species","location","plantEnvironment","lightRequirements","healthScore","includeImages","profileImageUrl","includeChats","metadata","source","Blob","downloadFile","filename","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","format","headers","push","csvRows","join","forEach","row","csvContent","exportToCSV","getExportSize","estimatedSizeBytes","estimatedSizeMB","estimatedSize","toFixed","Math","round","createAutoBackup","lastBackup","getItem","now","getTime","oneWeek","parseInt","toString","availableFormats","ExportModal","isOpen","onClose","setFormat","setIncludeImages","setIncludeChats","showSuccess","showError","useToast","AnimatePresence","scale","exit","e","stopPropagation","Download","X","Database","FileText","onChange","Image","MessageCircle","Info","Button","variant","toUpperCase","message","loading","iconMap","User","LogOut","Sun","Moon","Bell","Trash2","HelpCircle","Shield","Settings_default","settingsSections","isExportModalOpen","setIsExportModalOpen","isDark","toggleTheme","useThemeStore","signOut","profile","useAuthStore","navigate","useNavigate","handleSignOut","window","confirm","handleExportData","handleClearData","useMemo","items","useSettings","section","SettingsGroup","item","itemIndex","IconComponent","SettingsItem"],"mappings":"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","x_google_ignoreList":[0]}