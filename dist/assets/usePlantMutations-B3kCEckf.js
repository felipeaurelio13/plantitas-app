var C=e=>{throw TypeError(e)};var w=(e,t,s)=>t.has(e)||C("Cannot "+s);var i=(e,t,s)=>(w(e,t,"read from private field"),s?s.call(e):t.get(e)),f=(e,t,s)=>t.has(e)?C("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,s),v=(e,t,s,r)=>(w(e,t,"write to private field"),r?r.call(e,s):t.set(e,s),s),P=(e,t,s)=>(w(e,t,"access private method"),s);import{S as U,l as R,n as Q,o as _,q,v as D,r as M,w as F,x as I,y as k,u as A}from"./index-fgwvdg1Q.js";var y,b,l,c,p,S,O,K,L=(K=class extends U{constructor(t,s){super();f(this,p);f(this,y);f(this,b);f(this,l);f(this,c);v(this,y,t),this.setOptions(s),this.bindMethods(),P(this,p,S).call(this)}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(t){var r;const s=this.options;this.options=i(this,y).defaultMutationOptions(t),R(this.options,s)||i(this,y).getMutationCache().notify({type:"observerOptionsUpdated",mutation:i(this,l),observer:this}),s!=null&&s.mutationKey&&this.options.mutationKey&&Q(s.mutationKey)!==Q(this.options.mutationKey)?this.reset():((r=i(this,l))==null?void 0:r.state.status)==="pending"&&i(this,l).setOptions(this.options)}onUnsubscribe(){var t;this.hasListeners()||(t=i(this,l))==null||t.removeObserver(this)}onMutationUpdate(t){P(this,p,S).call(this),P(this,p,O).call(this,t)}getCurrentResult(){return i(this,b)}reset(){var t;(t=i(this,l))==null||t.removeObserver(this),v(this,l,void 0),P(this,p,S).call(this),P(this,p,O).call(this)}mutate(t,s){var r;return v(this,c,s),(r=i(this,l))==null||r.removeObserver(this),v(this,l,i(this,y).getMutationCache().build(i(this,y),this.options)),i(this,l).addObserver(this),i(this,l).execute(t)}},y=new WeakMap,b=new WeakMap,l=new WeakMap,c=new WeakMap,p=new WeakSet,S=function(){var s;const t=((s=i(this,l))==null?void 0:s.state)??_();v(this,b,{...t,isPending:t.status==="pending",isSuccess:t.status==="success",isError:t.status==="error",isIdle:t.status==="idle",mutate:this.mutate,reset:this.reset})},O=function(t){q.batch(()=>{var s,r,h,a,d,m,g,n;if(i(this,c)&&this.hasListeners()){const o=i(this,b).variables,u=i(this,b).context;(t==null?void 0:t.type)==="success"?((r=(s=i(this,c)).onSuccess)==null||r.call(s,t.data,o,u),(a=(h=i(this,c)).onSettled)==null||a.call(h,t.data,null,o,u)):(t==null?void 0:t.type)==="error"&&((m=(d=i(this,c)).onError)==null||m.call(d,t.error,o,u),(n=(g=i(this,c)).onSettled)==null||n.call(g,void 0,t.error,o,u))}this.listeners.forEach(o=>{o(i(this,b))})})},K);function E(e,t){const s=D(),[r]=M.useState(()=>new L(s,e));M.useEffect(()=>{r.setOptions(e)},[r,e]);const h=M.useSyncExternalStore(M.useCallback(d=>r.subscribe(q.batchCalls(d)),[r]),()=>r.getCurrentResult(),()=>r.getCurrentResult()),a=M.useCallback((d,m)=>{r.mutate(d,m).catch(F)},[r]);if(h.error&&I(r.options.throwOnError,[h.error]))throw h.error;return{...h,mutate:a,mutateAsync:h.mutate}}const z=()=>{const e=D(),{addPlant:t,updatePlant:s,deletePlant:r}=k.getState(),h=A(n=>n.user),a=h==null?void 0:h.id,d=E({mutationFn:n=>{if(!a)throw new Error("User not authenticated");return t(n,"Interior",a)},onSuccess:n=>{e.invalidateQueries({queryKey:["plants",a]})},onError:n=>{console.error("Failed to create plant:",n)}}),m=E({mutationFn:n=>{if(!a)throw new Error("User not authenticated");return s(n,a)},onMutate:async n=>{await e.cancelQueries({queryKey:["plants",a]});const o=e.getQueryData(["plants",a]);return o&&e.setQueryData(["plants",a],o.map(u=>u.id===n.id?n:u)),{previousPlants:o}},onError:(n,o,u)=>{u!=null&&u.previousPlants&&e.setQueryData(["plants",a],u.previousPlants)},onSettled:n=>{e.invalidateQueries({queryKey:["plants",a]})}}),g=E({mutationFn:n=>{if(!a)throw new Error("User not authenticated");return r(n,a)},onMutate:async n=>{await e.cancelQueries({queryKey:["plants",a]});const o=e.getQueryData(["plants",a]);return o&&e.setQueryData(["plants",a],o.filter(u=>u.id!==n)),{previousPlants:o}},onError:(n,o,u)=>{u!=null&&u.previousPlants&&e.setQueryData(["plants",a],u.previousPlants)},onSettled:()=>{e.invalidateQueries({queryKey:["plants",a]})}});return{createPlant:d.mutate,isCreatingPlant:d.isPending,updatePlant:m.mutate,isUpdatingPlant:m.isPending,deletePlant:g.mutate,isDeletingPlant:g.isPending}};export{z as u};
