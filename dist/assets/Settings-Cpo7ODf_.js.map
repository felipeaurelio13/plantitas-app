{"version":3,"file":"Settings-Cpo7ODf_.js","sources":["../../node_modules/@tanstack/query-core/build/modern/queryObserver.js","../../node_modules/@tanstack/react-query/build/modern/IsRestoringProvider.js","../../node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js","../../node_modules/@tanstack/react-query/build/modern/suspense.js","../../node_modules/@tanstack/react-query/build/modern/useBaseQuery.js","../../node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js","../../src/config/version.ts","../../src/hooks/usePlantsQuery.ts","../../node_modules/@tanstack/react-query/build/modern/useQuery.js","../../node_modules/idb/build/index.js","../../src/services/storageService.ts","../../src/components/Settings/SettingsGroup.tsx","../../src/components/ui/switch.tsx","../../src/components/Settings/SettingsItem.tsx","../../src/hooks/useDataExport.ts","../../src/components/data/ExportModal.tsx","../../src/pages/Settings.tsx","../../src/hooks/useSettings.ts"],"sourcesContent":["// src/queryObserver.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { fetchState } from \"./query.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale\n} from \"./utils.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.options = options;\n    this.#client = client;\n    this.#selectError = null;\n    this.#currentThenable = pendingThenable();\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error(\"experimental_prefetchInRender feature flag is not enabled\")\n      );\n    }\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery = void 0;\n  #currentQueryInitialState = void 0;\n  #currentResult = void 0;\n  #currentResultState;\n  #currentResultOptions;\n  #currentThenable;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps = /* @__PURE__ */ new Set();\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    );\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    );\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\" && typeof this.options.enabled !== \"function\" && typeof resolveEnabled(this.options.enabled, this.#currentQuery) !== \"boolean\") {\n      throw new Error(\n        \"Expected enabled to be a boolean or a callback that returns a boolean\"\n      );\n    }\n    this.#updateQuery();\n    this.#currentQuery.setOptions(this.options);\n    if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(\n      this.#currentQuery,\n      prevQuery,\n      this.options,\n      prevOptions\n    )) {\n      this.#executeFetch();\n    }\n    this.updateResult();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || resolveStaleTime(this.options.staleTime, this.#currentQuery) !== resolveStaleTime(prevOptions.staleTime, this.#currentQuery))) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result, onPropTracked) {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key);\n        onPropTracked?.(key);\n        return Reflect.get(target, key);\n      }\n    });\n  }\n  trackProp(key) {\n    this.#trackedProps.add(key);\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch({ ...options } = {}) {\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(\n      this.options,\n      fetchOptions\n    );\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery\n    );\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime);\n    const timeout = time + 1;\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || resolveEnabled(this.options.enabled, this.#currentQuery) === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const { state } = query;\n    let newState = { ...state };\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options)\n        };\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        newState.fetchStatus = \"idle\";\n      }\n    }\n    let { error, errorUpdatedAt, status } = newState;\n    data = newState.data;\n    let skipSelect = false;\n    if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n        skipSelect = true;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(\n          this.#lastQueryWithDefinedData?.state.data,\n          this.#lastQueryWithDefinedData\n        ) : options.placeholderData;\n      }\n      if (placeholderData !== void 0) {\n        status = \"success\";\n        data = replaceData(\n          prevResult?.data,\n          placeholderData,\n          options\n        );\n        isPlaceholderData = true;\n      }\n    }\n    if (options.select && data !== void 0 && !skipSelect) {\n      if (prevResult && data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = newState.fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const hasData = data !== void 0;\n    const result = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n      isEnabled: resolveEnabled(options.enabled, query) !== false\n    };\n    const nextResult = result;\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable) => {\n        if (nextResult.status === \"error\") {\n          thenable.reject(nextResult.error);\n        } else if (nextResult.data !== void 0) {\n          thenable.resolve(nextResult.data);\n        }\n      };\n      const recreateThenable = () => {\n        const pending = this.#currentThenable = nextResult.promise = pendingThenable();\n        finalizeThenableIfPossible(pending);\n      };\n      const prevThenable = this.#currentThenable;\n      switch (prevThenable.status) {\n        case \"pending\":\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable);\n          }\n          break;\n        case \"fulfilled\":\n          if (nextResult.status === \"error\" || nextResult.data !== prevThenable.value) {\n            recreateThenable();\n          }\n          break;\n        case \"rejected\":\n          if (nextResult.status !== \"error\" || nextResult.error !== prevThenable.reason) {\n            recreateThenable();\n          }\n          break;\n      }\n    }\n    return nextResult;\n  }\n  updateResult() {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const { notifyOnChangeProps } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps\n      );\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    this.#notify({ listeners: shouldNotifyListeners() });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (resolveEnabled(options.enabled, query) !== false && resolveStaleTime(options.staleTime, query) !== \"static\") {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport {\n  QueryObserver\n};\n//# sourceMappingURL=queryObserver.js.map","\"use client\";\n\n// src/IsRestoringProvider.ts\nimport * as React from \"react\";\nvar IsRestoringContext = React.createContext(false);\nvar useIsRestoring = () => React.useContext(IsRestoringContext);\nvar IsRestoringProvider = IsRestoringContext.Provider;\nexport {\n  IsRestoringProvider,\n  useIsRestoring\n};\n//# sourceMappingURL=IsRestoringProvider.js.map","\"use client\";\n\n// src/QueryErrorResetBoundary.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createValue() {\n  let isReset = false;\n  return {\n    clearReset: () => {\n      isReset = false;\n    },\n    reset: () => {\n      isReset = true;\n    },\n    isReset: () => {\n      return isReset;\n    }\n  };\n}\nvar QueryErrorResetBoundaryContext = React.createContext(createValue());\nvar useQueryErrorResetBoundary = () => React.useContext(QueryErrorResetBoundaryContext);\nvar QueryErrorResetBoundary = ({\n  children\n}) => {\n  const [value] = React.useState(() => createValue());\n  return /* @__PURE__ */ jsx(QueryErrorResetBoundaryContext.Provider, { value, children: typeof children === \"function\" ? children(value) : children });\n};\nexport {\n  QueryErrorResetBoundary,\n  useQueryErrorResetBoundary\n};\n//# sourceMappingURL=QueryErrorResetBoundary.js.map","// src/suspense.ts\nvar defaultThrowOnError = (_error, query) => query.state.data === void 0;\nvar ensureSuspenseTimers = (defaultedOptions) => {\n  if (defaultedOptions.suspense) {\n    const clamp = (value) => value === \"static\" ? value : Math.max(value ?? 1e3, 1e3);\n    const originalStaleTime = defaultedOptions.staleTime;\n    defaultedOptions.staleTime = typeof originalStaleTime === \"function\" ? (...args) => clamp(originalStaleTime(...args)) : clamp(originalStaleTime);\n    if (typeof defaultedOptions.gcTime === \"number\") {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1e3);\n    }\n  }\n};\nvar willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\nvar shouldSuspend = (defaultedOptions, result) => defaultedOptions?.suspense && result.isPending;\nvar fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {\n  errorResetBoundary.clearReset();\n});\nexport {\n  defaultThrowOnError,\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n};\n//# sourceMappingURL=suspense.js.map","\"use client\";\n\n// src/useBaseQuery.ts\nimport * as React from \"react\";\nimport { isServer, noop, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.js\";\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n} from \"./errorBoundaryUtils.js\";\nimport { useIsRestoring } from \"./IsRestoringProvider.js\";\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n} from \"./suspense.js\";\nfunction useBaseQuery(options, Observer, queryClient) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object'\n      );\n    }\n  }\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const client = useQueryClient(queryClient);\n  const defaultedOptions = client.defaultQueryOptions(options);\n  client.getDefaultOptions().queries?._experimental_beforeQuery?.(\n    defaultedOptions\n  );\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`\n      );\n    }\n  }\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  ensureSuspenseTimers(defaultedOptions);\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  useClearResetErrorBoundary(errorResetBoundary);\n  const isNewCacheEntry = !client.getQueryCache().get(defaultedOptions.queryHash);\n  const [observer] = React.useState(\n    () => new Observer(\n      client,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  const shouldSubscribe = !isRestoring && options.subscribed !== false;\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe ? observer.subscribe(notifyManager.batchCalls(onStoreChange)) : noop;\n        observer.updateResult();\n        return unsubscribe;\n      },\n      [observer, shouldSubscribe]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions);\n  }, [defaultedOptions, observer]);\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\n  }\n  if (getHasError({\n    result,\n    errorResetBoundary,\n    throwOnError: defaultedOptions.throwOnError,\n    query: client.getQueryCache().get(defaultedOptions.queryHash),\n    suspense: defaultedOptions.suspense\n  })) {\n    throw result.error;\n  }\n  ;\n  client.getDefaultOptions().queries?._experimental_afterQuery?.(\n    defaultedOptions,\n    result\n  );\n  if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {\n    const promise = isNewCacheEntry ? (\n      // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n      fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n    ) : (\n      // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n      client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n    );\n    promise?.catch(noop).finally(() => {\n      observer.updateResult();\n    });\n  }\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\nexport {\n  useBaseQuery\n};\n//# sourceMappingURL=useBaseQuery.js.map","\"use client\";\n\n// src/errorBoundaryUtils.ts\nimport * as React from \"react\";\nimport { shouldThrowError } from \"@tanstack/query-core\";\nvar ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {\n  if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nvar useClearResetErrorBoundary = (errorResetBoundary) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nvar getHasError = ({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense\n}) => {\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && (suspense && result.data === void 0 || shouldThrowError(throwOnError, [result.error, query]));\n};\nexport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n};\n//# sourceMappingURL=errorBoundaryUtils.js.map","// Configuración de versión de la aplicación\n// Este archivo se actualiza automáticamente en cada build\n\nexport const APP_VERSION = '1.0.0';\nexport const BUILD_TIMESTAMP = '2025-07-28T15:31:27.328Z';\nexport const BUILD_DATE = '28 de julio de 2025, 15:31';\n\n// Información adicional de la aplicación\nexport const APP_INFO = {\n  name: 'Plantitas',\n  version: APP_VERSION,\n  buildDate: BUILD_DATE,\n  buildTimestamp: BUILD_TIMESTAMP,\n  description: 'Aplicación de cuidado de plantas',\n  author: 'Felipe Aurelio',\n  repository: 'https://github.com/felipeaurelio13/plantitas-app'\n};\n\n// Función para obtener la versión completa\nexport const getFullVersion = () => {\n  return `${APP_INFO.name} v${APP_INFO.version} (${APP_INFO.buildDate})`;\n};\n\n// Función para obtener información de versión para debugging\nexport const getVersionInfo = () => {\n  return {\n    ...APP_INFO,\n    userAgent: navigator.userAgent,\n    platform: navigator.platform,\n    language: navigator.language,\n    online: navigator.onLine,\n    timestamp: new Date().toISOString()\n  };\n};","import { useQuery } from '@tanstack/react-query';\nimport useAuthStore from '../stores/useAuthStore';\nimport plantService from '../services/plantService';\nimport { PERFORMANCE_CONFIG } from '../lib/performance';\n\nexport const usePlantsQuery = () => {\n  const user = useAuthStore((state) => state.user);\n\n  return useQuery({\n    queryKey: ['plants', user?.id],\n    queryFn: async () => {\n      if (!user) {\n        return Promise.resolve([]);\n      }\n      // Agregar timing para debug en desarrollo\n      if (import.meta.env.DEV) {\n        const start = performance.now();\n        const result = await plantService.getUserPlantSummaries(user.id);\n        const end = performance.now();\n        console.log(`[usePlantsQuery] Loaded ${result.length} plants in ${(end - start).toFixed(2)}ms`);\n        return result;\n      }\n      return plantService.getUserPlantSummaries(user.id);\n    },\n    enabled: !!user,\n    staleTime: PERFORMANCE_CONFIG.QUERY.STALE_TIME.MEDIUM,\n    gcTime: PERFORMANCE_CONFIG.QUERY.GC_TIME.LONG,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchOnReconnect: true,\n    placeholderData: [],\n  });\n}; ","\"use client\";\n\n// src/useQuery.ts\nimport { QueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nfunction useQuery(options, queryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient);\n}\nexport {\n  useQuery\n};\n//# sourceMappingURL=useQuery.js.map","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","import { openDB, DBSchema, IDBPDatabase } from 'idb';\nimport { Plant } from '../schemas';\n\ninterface PlantCareDB extends DBSchema {\n  plants: {\n    key: string;\n    value: Plant;\n    indexes: { 'by-health': number; 'by-date': Date };\n  };\n  images: {\n    key: string;\n    value: { id: string; plantId: string; blob: Blob; timestamp: Date };\n  };\n  settings: {\n    key: string;\n    value: any;\n  };\n}\n\nclass StorageService {\n  private db: IDBPDatabase<PlantCareDB> | null = null;\n\n  async init() {\n    if (this.db) return this.db;\n\n    this.db = await openDB<PlantCareDB>('PlantCareDB', 1, {\n      upgrade(db) {\n        // Plants store\n        const plantStore = db.createObjectStore('plants', { keyPath: 'id' });\n        plantStore.createIndex('by-health', 'healthScore');\n        plantStore.createIndex('by-date', 'dateAdded');\n\n        // Images store for offline caching\n        db.createObjectStore('images', { keyPath: 'id' });\n\n        // Settings store\n        db.createObjectStore('settings', { keyPath: 'key' });\n      },\n    });\n\n    return this.db;\n  }\n\n  async savePlant(plant: Plant): Promise<void> {\n    const db = await this.init();\n    await db.put('plants', plant);\n    \n    // Also save to localStorage as backup\n    const plants = await this.getAllPlants();\n    localStorage.setItem('plants', JSON.stringify(plants));\n  }\n\n  async getPlant(id: string): Promise<Plant | undefined> {\n    const db = await this.init();\n    return await db.get('plants', id);\n  }\n\n  async getAllPlants(): Promise<Plant[]> {\n    const db = await this.init();\n    const plants = await db.getAll('plants');\n    \n    // Convert date strings back to Date objects\n    return plants.map(plant => ({\n      ...plant,\n      dateAdded: new Date(plant.dateAdded),\n      lastWatered: plant.lastWatered ? new Date(plant.lastWatered) : undefined,\n      lastFertilized: plant.lastFertilized ? new Date(plant.lastFertilized) : undefined,\n      images: plant.images.map(img => ({\n        ...img,\n        timestamp: new Date(img.timestamp),\n      })),\n      // Fix: usar chatMessages en lugar de chatHistory\n      chatHistory: (plant as any).chatMessages?.map((msg: any) => ({\n        ...msg,\n        timestamp: new Date(msg.timestamp),\n      })) || [],\n      notifications: plant.notifications.map(notif => ({\n        ...notif,\n        // Fix: las notificaciones no tienen scheduledFor en la interfaz actual\n        createdAt: new Date(notif.createdAt),\n      })),\n    }));\n  }\n\n  async deletePlant(id: string): Promise<void> {\n    const db = await this.init();\n    await db.delete('plants', id);\n    \n    // Update localStorage backup\n    const plants = await this.getAllPlants();\n    localStorage.setItem('plants', JSON.stringify(plants));\n  }\n\n  async saveImageBlob(imageId: string, plantId: string, blob: Blob): Promise<void> {\n    const db = await this.init();\n    await db.put('images', {\n      id: imageId,\n      plantId,\n      blob,\n      timestamp: new Date(),\n    });\n  }\n\n  async getImageBlob(imageId: string): Promise<Blob | undefined> {\n    const db = await this.init();\n    const result = await db.get('images', imageId);\n    return result?.blob;\n  }\n\n  async saveSetting(key: string, value: any): Promise<void> {\n    const db = await this.init();\n    await db.put('settings', { key, value });\n  }\n\n  async getSetting(key: string): Promise<any> {\n    const db = await this.init();\n    const result = await db.get('settings', key);\n    return result?.value;\n  }\n\n  async exportData(): Promise<string> {\n    const plants = await this.getAllPlants();\n    const settings = {\n      theme: await this.getSetting('theme'),\n      notifications: await this.getSetting('notifications'),\n    };\n\n    return JSON.stringify({\n      plants,\n      settings,\n      exportDate: new Date().toISOString(),\n      version: '1.0.0',\n    }, null, 2);\n  }\n\n  async importData(jsonData: string): Promise<void> {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.plants) {\n        for (const plant of data.plants) {\n          await this.savePlant(plant);\n        }\n      }\n\n      if (data.settings) {\n        for (const [key, value] of Object.entries(data.settings)) {\n          if (value !== undefined) {\n            await this.saveSetting(key, value);\n          }\n        }\n      }\n    } catch (error) {\n      throw new Error('Invalid data format');\n    }\n  }\n\n  async clearAllData(): Promise<void> {\n    const db = await this.init();\n    await db.clear('plants');\n    await db.clear('images');\n    await db.clear('settings');\n    localStorage.removeItem('plants');\n  }\n}\n\nexport const storageService = new StorageService();","import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface SettingsGroupProps {\n  title: string;\n  children: React.ReactNode;\n  delay?: number;\n}\n\nconst SettingsGroup = ({ title, children, delay = 0 }: SettingsGroupProps) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: delay * 0.1 }}\n      className=\"space-y-3\"\n    >\n      <h2 className=\"text-lg font-bold text-foreground px-4\">\n        {title}\n      </h2>\n      <div className=\"bg-muted/50 rounded-2xl overflow-hidden\">\n        {children}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default SettingsGroup; ","\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-7 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-6 w-6 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch } ","import React from 'react';\nimport { ChevronRight } from 'lucide-react';\nimport { cn } from '../../lib/utils';\nimport { Switch } from '../ui/switch'; // Assuming you have a Switch component\n\ninterface SettingsItemProps {\n  icon: React.ElementType;\n  label: string;\n  value?: string;\n  onClick?: () => void;\n  isLast?: boolean;\n  type?: 'button' | 'toggle'; // Mantener toggle solo para theme\n  disabled?: boolean;\n  toggleState?: boolean;\n  onToggleChange?: (checked: boolean) => void;\n}\n\nconst SettingsItem = ({\n  icon: Icon,\n  label,\n  value,\n  onClick,\n  isLast = false,\n  type = 'button',\n  disabled = false,\n  toggleState = false,\n  onToggleChange,\n}: SettingsItemProps) => {\n  const switchId = React.useId();\n\n  const content = (\n    <>\n      <div className=\"flex items-center gap-4\">\n        <div className=\"flex h-8 w-8 items-center justify-center rounded-lg bg-background\">\n          <Icon size={18} className=\"text-muted-foreground\" />\n        </div>\n        <span className=\"font-medium text-foreground\">{label}</span>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        {type === 'button' && (\n          <>\n            {value && <span className=\"text-sm text-muted-foreground\">{value}</span>}\n            <ChevronRight size={16} className=\"text-muted-foreground/50\" />\n          </>\n        )}\n        {type === 'toggle' && (\n          <Switch\n            id={switchId}\n            checked={toggleState}\n            onCheckedChange={onToggleChange}\n            aria-label={label}\n          />\n        )}\n      </div>\n    </>\n  );\n\n  const itemClasses = cn(\n    'flex w-full items-center justify-between p-3 text-left',\n    !isLast && 'border-b border-background',\n    onClick && 'transition-colors hover:bg-background/50'\n  );\n\n  if (type === 'button') {\n    return (\n      <button onClick={onClick} className={itemClasses} disabled={disabled}>\n        {content}\n      </button>\n    );\n  }\n\n  return (\n    <label htmlFor={switchId} className={cn(itemClasses, 'cursor-pointer')}>\n      {content}\n    </label>\n  );\n};\n\nexport default SettingsItem; ","import { useState } from 'react';\nimport { usePlantsQuery } from './usePlantsQuery';\n// import { Plant } from '../schemas'; // Commented out as it's not directly used\n\ninterface ExportOptions {\n  format: 'json' | 'csv';\n  includeImages: boolean;\n  includeChats: boolean;\n}\n\ninterface ExportData {\n  exportDate: string;\n  plantCount: number;\n  plants: any[];\n  metadata: {\n    version: string;\n    source: 'Plant Care Companion';\n  };\n}\n\nexport const useDataExport = () => {\n  const [isExporting, setIsExporting] = useState(false);\n  const { data: plants = [] } = usePlantsQuery();\n\n  const formatDate = (date: Date): string => {\n    return date.toISOString().split('T')[0];\n  };\n\n  const sanitizeForCSV = (value: any): string => {\n    if (value === null || value === undefined) return '';\n    const str = String(value);\n    // Escape commas and quotes\n    if (str.includes(',') || str.includes('\"') || str.includes('\\n')) {\n      return `\"${str.replace(/\"/g, '\"\"')}\"`;\n    }\n    return str;\n  };\n\n  const exportToJSON = async (options: ExportOptions): Promise<void> => {\n    setIsExporting(true);\n    \n    try {\n      const exportData: ExportData = {\n        exportDate: new Date().toISOString(),\n        plantCount: plants.length,\n        plants: plants.map(plant => ({\n          id: plant.id,\n          name: plant.name,\n          nickname: plant.nickname,\n          species: plant.species,\n          location: plant.location,\n          plantEnvironment: plant.plantEnvironment,\n          lightRequirements: plant.lightRequirements,\n          healthScore: plant.healthScore,\n          lastWatered: plant.lastWatered?.toISOString(),\n          // Note: Some fields may not be available in current schema\n          ...(options.includeImages && {\n            profileImageUrl: plant.profileImageUrl\n          }),\n          // Placeholder for future chat integration\n          ...(options.includeChats && {\n            chatHistory: [] // Will be implemented when chat history is available\n          })\n        })),\n        metadata: {\n          version: '1.0.0',\n          source: 'Plant Care Companion'\n        }\n      };\n\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n        type: 'application/json'\n      });\n      \n      downloadFile(blob, `plantas-backup-${formatDate(new Date())}.json`);\n    } catch (error) {\n      console.error('Error exporting to JSON:', error);\n      throw new Error('Failed to export data as JSON');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const exportToCSV = async (options: ExportOptions): Promise<void> => {\n    setIsExporting(true);\n    \n    try {\n      const headers = [\n        'ID',\n        'Nombre',\n        'Apodo',\n        'Especie',\n        'Ubicación',\n        'Ambiente',\n        'Luz Requerida',\n        'Puntuación Salud',\n        'Último Riego'\n      ];\n\n              if (options.includeImages) {\n          headers.push('Imagen Principal');\n        }\n\n      const csvRows = [headers.join(',')];\n      \n      plants.forEach(plant => {\n        const row = [\n          sanitizeForCSV(plant.id),\n          sanitizeForCSV(plant.name),\n          sanitizeForCSV(plant.nickname || ''),\n          sanitizeForCSV(plant.species),\n          sanitizeForCSV(plant.location),\n          sanitizeForCSV(plant.plantEnvironment || ''),\n          sanitizeForCSV(plant.lightRequirements || ''),\n          sanitizeForCSV(plant.healthScore || ''),\n          sanitizeForCSV(plant.lastWatered ? formatDate(plant.lastWatered) : '')\n        ];\n\n        if (options.includeImages) {\n          row.push(\n            sanitizeForCSV(plant.profileImageUrl || '')\n          );\n        }\n\n        csvRows.push(row.join(','));\n      });\n\n      const csvContent = csvRows.join('\\n');\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      \n      downloadFile(blob, `plantas-${formatDate(new Date())}.csv`);\n    } catch (error) {\n      console.error('Error exporting to CSV:', error);\n      throw new Error('Failed to export data as CSV');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const downloadFile = (blob: Blob, filename: string): void => {\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const exportData = async (options: ExportOptions): Promise<void> => {\n    if (plants.length === 0) {\n      throw new Error('No hay plantas para exportar');\n    }\n\n    switch (options.format) {\n      case 'json':\n        return exportToJSON(options);\n      case 'csv':\n        return exportToCSV(options);\n      default:\n        throw new Error('Formato de exportación no soportado');\n    }\n  };\n\n  const getExportSize = (): { plantCount: number; estimatedSize: string } => {\n    const estimatedSizeBytes = plants.length * 1024; // Rough estimate: 1KB per plant\n    const estimatedSizeMB = estimatedSizeBytes / (1024 * 1024);\n    \n    return {\n      plantCount: plants.length,\n      estimatedSize: estimatedSizeMB > 1 \n        ? `${estimatedSizeMB.toFixed(1)} MB` \n        : `${Math.round(estimatedSizeBytes / 1024)} KB`\n    };\n  };\n\n  // Auto-backup functionality\n  const createAutoBackup = async (): Promise<void> => {\n    try {\n      const lastBackup = localStorage.getItem('last-auto-backup');\n      const now = new Date().getTime();\n      const oneWeek = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\n\n      if (!lastBackup || (now - parseInt(lastBackup)) > oneWeek) {\n        await exportToJSON({\n          format: 'json',\n          includeImages: false, // Keep auto-backup lightweight\n          includeChats: false\n        });\n        \n        localStorage.setItem('last-auto-backup', now.toString());\n      }\n    } catch (error) {\n      console.warn('Auto-backup failed:', error);\n    }\n  };\n\n  return {\n    exportData,\n    isExporting,\n    getExportSize,\n    createAutoBackup,\n    availableFormats: ['json', 'csv'] as const\n  };\n};","import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Download, \n  X, \n  FileText, \n  Database, \n  Image, \n  MessageCircle,\n  Info,\n} from 'lucide-react';\nimport { Button } from '../ui/Button';\nimport { useDataExport } from '../../hooks/useDataExport';\nimport { useToast } from '../ui/Toast/ToastProvider';\n\ninterface ExportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const ExportModal: React.FC<ExportModalProps> = ({ isOpen, onClose }) => {\n  const [format, setFormat] = useState<'json' | 'csv'>('json');\n  const [includeImages, setIncludeImages] = useState(true);\n  const [includeChats, setIncludeChats] = useState(false);\n  \n  const { exportData, isExporting, getExportSize } = useDataExport();\n  const { showSuccess, showError } = useToast();\n  const { plantCount, estimatedSize } = getExportSize();\n\n  const handleExport = async () => {\n    try {\n      await exportData({\n        format,\n        includeImages,\n        includeChats\n      });\n      \n      showSuccess(\n        'Exportación completada',\n        `Se descargaron los datos de ${plantCount} plantas en formato ${format.toUpperCase()}.`\n      );\n      \n      onClose();\n    } catch (error) {\n      showError(\n        'Error en la exportación',\n        error instanceof Error ? error.message : 'No se pudo completar la exportación.'\n      );\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95, y: 20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.95, y: 20 }}\n          onClick={(e) => e.stopPropagation()}\n          className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl max-w-lg w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center\">\n                  <Download className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                    Exportar Datos\n                  </h2>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                    Descarga una copia de tus datos de plantas\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={onClose}\n                disabled={isExporting}\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors p-1\"\n                aria-label=\"Cerrar modal\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6 space-y-6\">\n            {/* Stats */}\n            <div className=\"bg-gray-50 dark:bg-gray-900/50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Plantas a exportar:</span>\n                <span className=\"font-medium text-gray-900 dark:text-gray-100\">{plantCount}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm mt-2\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Tamaño estimado:</span>\n                <span className=\"font-medium text-gray-900 dark:text-gray-100\">{estimatedSize}</span>\n              </div>\n            </div>\n\n            {/* Format Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Formato de archivo\n              </label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <button\n                  onClick={() => setFormat('json')}\n                  disabled={isExporting}\n                  className={`\n                    p-4 rounded-lg border-2 transition-all text-left\n                    ${format === 'json'\n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                    }\n                  `}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Database className={`w-5 h-5 ${format === 'json' ? 'text-blue-600' : 'text-gray-500'}`} />\n                    <div>\n                      <div className={`font-medium ${format === 'json' ? 'text-blue-900 dark:text-blue-100' : 'text-gray-900 dark:text-gray-100'}`}>\n                        JSON\n                      </div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Completo, reimportable\n                      </div>\n                    </div>\n                  </div>\n                </button>\n\n                <button\n                  onClick={() => setFormat('csv')}\n                  disabled={isExporting}\n                  className={`\n                    p-4 rounded-lg border-2 transition-all text-left\n                    ${format === 'csv'\n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                    }\n                  `}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <FileText className={`w-5 h-5 ${format === 'csv' ? 'text-blue-600' : 'text-gray-500'}`} />\n                    <div>\n                      <div className={`font-medium ${format === 'csv' ? 'text-blue-900 dark:text-blue-100' : 'text-gray-900 dark:text-gray-100'}`}>\n                        CSV\n                      </div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Para Excel/Sheets\n                      </div>\n                    </div>\n                  </div>\n                </button>\n              </div>\n            </div>\n\n            {/* Options */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Incluir en la exportación\n              </label>\n              <div className=\"space-y-3\">\n                <label className=\"flex items-center gap-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeImages}\n                    onChange={(e) => setIncludeImages(e.target.checked)}\n                    disabled={isExporting}\n                    className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                  <Image className=\"w-4 h-4 text-gray-500\" />\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    Metadatos de imágenes\n                  </span>\n                </label>\n\n                <label className=\"flex items-center gap-3 cursor-pointer opacity-50\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeChats}\n                    onChange={(e) => setIncludeChats(e.target.checked)}\n                    disabled={true} // Disabled until chat history is implemented\n                    className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                  />\n                  <MessageCircle className=\"w-4 h-4 text-gray-500\" />\n                  <span className=\"text-sm text-gray-500\">\n                    Historial de chat (próximamente)\n                  </span>\n                </label>\n              </div>\n            </div>\n\n            {/* Info */}\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n              <div className=\"flex gap-3\">\n                <Info className=\"w-5 h-5 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5\" />\n                <div className=\"text-sm\">\n                  <p className=\"text-blue-800 dark:text-blue-200 font-medium mb-1\">\n                    Sobre la exportación\n                  </p>\n                  <p className=\"text-blue-700 dark:text-blue-300 leading-relaxed\">\n                    Los datos exportados incluyen toda la información de tus plantas: nombres, especies, \n                    cuidados, fechas de riego y ubicaciones. Las imágenes se incluyen como referencias URL.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"p-6 border-t border-gray-200 dark:border-gray-700 flex gap-3 justify-end\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isExporting}\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={handleExport}\n              disabled={isExporting || plantCount === 0}\n              loading={isExporting}\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              {isExporting ? 'Exportando...' : 'Exportar Datos'}\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","import React from 'react';\nimport {\n  User, LogOut, Sun, Moon, Bell, Download, Trash2, HelpCircle, Shield, Info\n} from 'lucide-react';\nimport { useSettings } from '../hooks/useSettings';\nimport { SettingsGroup, SettingsItem } from '../components/Settings';\nimport { ExportModal } from '../components/data/ExportModal';\n\nconst iconMap: { [key: string]: React.ElementType } = {\n  User, LogOut, Sun, Moon, Bell, Download, Trash2, HelpCircle, Shield, Info\n};\n\nconst Settings: React.FC = () => {\n  const { settingsSections, isExportModalOpen, setIsExportModalOpen } = useSettings();\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <header>\n        <h1 className=\"text-3xl font-bold text-foreground\">\n          Configuración\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Gestiona tu cuenta y preferencias de la app.\n        </p>\n      </header>\n\n      {settingsSections.map((section, index) => (\n        <SettingsGroup key={section.title} title={section.title} delay={index}>\n          {section.items.map((item, itemIndex) => {\n            const IconComponent = iconMap[item.icon as string];\n            const isLast = itemIndex === section.items.length - 1;\n\n            if (item.type === 'toggle') {\n              return (\n                <SettingsItem\n                  key={item.id}\n                  icon={IconComponent}\n                  label={item.label}\n                  isLast={isLast}\n                  type=\"toggle\"\n                  toggleState={\"toggleState\" in item ? item.toggleState : false}\n                  onToggleChange={\"onToggleChange\" in item ? item.onToggleChange : undefined}\n                />\n              );\n            }\n            \n            return (\n              <SettingsItem\n                key={item.id}\n                icon={IconComponent}\n                label={item.label}\n                value={\"value\" in item && typeof item.value === 'string' ? item.value : undefined}\n                onClick={\"onClick\" in item ? item.onClick : undefined}\n                isLast={isLast}\n                type=\"button\"\n                disabled={\"disabled\" in item ? item.disabled : false}\n              />\n            );\n          })}\n        </SettingsGroup>\n      ))}\n\n      {/* Export Modal */}\n      <ExportModal \n        isOpen={isExportModalOpen}\n        onClose={() => setIsExportModalOpen(false)}\n      />\n    </div>\n  );\n};\n\nexport default Settings;","import { useMemo, useState } from 'react';\nimport { useThemeStore, useAuthStore } from '../stores';\nimport { storageService } from '../services/storageService';\nimport { useNavigate } from 'react-router-dom';\nimport { getFullVersion } from '../config/version';\n\nexport const useSettings = () => {\n  const { isDark, toggleTheme } = useThemeStore();\n  const { signOut, profile } = useAuthStore();\n  const navigate = useNavigate();\n  const [isExportModalOpen, setIsExportModalOpen] = useState(false);\n\n  // Local state for settings that don't have a store\n  // TODO: Reemplazar por lógica real si se requiere\n  const hasDataToExport = true;\n  const hasDataToDelete = true;\n\n  const handleSignOut = async () => {\n    // We should use a custom modal here in a real app\n    if (window.confirm('¿Estás seguro de que quieres cerrar sesión?')) {\n      try {\n        await signOut();\n        navigate('/auth'); // Redirect to auth page after sign out\n      } catch (error) {\n        console.error('Error signing out:', error);\n        // We should show a toast notification here\n      }\n    }\n  };\n\n  \n  const handleExportData = () => {\n    setIsExportModalOpen(true);\n  };\n  \n  const handleClearData = async () => {\n    if (window.confirm('¿Estás seguro de que quieres eliminar todos tus datos? Esta acción es irreversible.')) {\n      try {\n        await storageService.clearAllData();\n        // Show success toast and possibly sign out user\n        await handleSignOut();\n      } catch (error) {\n        console.error('Error clearing data:', error);\n        // Show error toast\n      }\n    }\n  };\n\n  const settingsSections = useMemo(() => [\n    {\n      title: 'Cuenta',\n      items: [\n        {\n          id: 'signout',\n          icon: 'LogOut',\n          label: 'Cerrar sesión',\n          type: 'button',\n          onClick: handleSignOut,\n        },\n      ],\n    },\n    {\n      title: 'Preferencias',\n      items: [\n        {\n          id: 'theme',\n          icon: isDark ? 'Sun' : 'Moon',\n          label: 'Modo Oscuro',\n          type: 'toggle' as const,\n          toggleState: isDark,\n          onToggleChange: toggleTheme,\n        },\n      ],\n    },\n    {\n        title: 'Datos',\n        items: [\n            {\n                id: 'export',\n                icon: 'Download',\n                label: 'Exportar mis datos',\n                type: 'button',\n                onClick: handleExportData,\n                disabled: !profile || !hasDataToExport,\n            },\n            {\n                id: 'delete',\n                icon: 'Trash2',\n                label: 'Eliminar mis datos',\n                type: 'button',\n                onClick: handleClearData,\n                disabled: !profile || !hasDataToDelete,\n            },\n        ],\n    },\n    {\n      title: 'Soporte',\n      items: [\n        {\n          id: 'about',\n          icon: 'Info',\n          label: 'Acerca de Plantitas',\n          value: getFullVersion(),\n          onClick: () => { \n            console.log('Show about modal with version info');\n            // Aquí se podría abrir un modal con información detallada\n          },\n          type: 'button' as const,\n        },\n        // Funciones de soporte adicionales - ver ROADMAP.md\n        /* \n        {\n          id: 'help',\n          icon: 'HelpCircle',\n          label: 'Ayuda y FAQ',\n          onClick: () => { console.log('Navigate to help page'); },\n          type: 'button' as const,\n        },\n        {\n          id: 'privacy',\n          icon: 'Shield',\n          label: 'Política de Privacidad',\n          onClick: () => { console.log('Navigate to privacy page'); },\n          type: 'button' as const,\n        }\n        */\n      ],\n    },\n  ], [isDark, profile, handleSignOut, toggleTheme]);\n\n  return {\n    settingsSections,\n    isExportModalOpen,\n    setIsExportModalOpen,\n  };\n}; "],"names":["QueryObserver","Subscribable","constructor","client","options","super","this","selectError","currentThenable","pendingThenable","experimental_prefetchInRender","reject","Error","bindMethods","setOptions","currentQuery","currentQueryInitialState","currentResult","currentResultState","currentResultOptions","selectFn","selectResult","lastQueryWithDefinedData","staleTimeoutId","refetchIntervalId","currentRefetchInterval","trackedProps","Set","refetch","bind","onSubscribe","listeners","size","addObserver","shouldFetchOnMount","executeFetch","updateResult","updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","prevOptions","prevQuery","defaultQueryOptions","enabled","resolveEnabled","updateQuery","_defaulted","shallowEqualObjects","getQueryCache","notify","type","query","observer","mounted","shouldFetchOptionally","resolveStaleTime","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","updateRefetchInterval","getOptimisticResult","build","result","createResult","optimisticResult","getCurrentResult","shouldAssignObserverCurrentProperties","state","trackResult","onPropTracked","Proxy","get","target","key","trackProp","Reflect","add","getCurrentQuery","fetch","fetchOptimistic","defaultedOptions","then","fetchOptions","cancelRefetch","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","setTimeout","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryInitialState","data","newState","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","fetchState","fetchStatus","error","errorUpdatedAt","status","skipSelect","placeholderData","replaceData","select","Date","now","isFetching","isPending","isError","isLoading","hasData","nextResult","isSuccess","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","isEnabled","finalizeThenableIfPossible","thenable","resolve","recreateThenable","pending","prevThenable","queryHash","value","reason","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","Object","keys","some","typedKey","has","shouldNotifyListeners","onQueryUpdate","notifyOptions","notifyManager","batch","forEach","listener","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","IsRestoringContext","React.createContext","Provider","QueryErrorResetBoundaryContext","isReset","clearReset","reset","createValue","errorResetBoundary","useBaseQuery","Observer","queryClient","isRestoring","React.useContext","useQueryClient","getDefaultOptions","queries","_experimental_beforeQuery","clamp","Math","max","originalStaleTime","args","gcTime","ensureSuspenseTimers","ensurePreventErrorBoundaryRetry","React.useEffect","useClearResetErrorBoundary","isNewCacheEntry","React.useState","shouldSubscribe","subscribed","React.useSyncExternalStore","React.useCallback","onStoreChange","unsubscribe","subscribe","batchCalls","shouldSuspend","shouldThrowError","getHasError","_experimental_afterQuery","willFetch","finally","APP_INFO","usePlantsQuery","user","useAuthStore","queryKey","id","queryFn","async","plantService","getUserPlantSummaries","Promise","PERFORMANCE_CONFIG","QUERY","STALE_TIME","MEDIUM","GC_TIME","LONG","instanceOfAny","object","constructors","c","idbProxyableTypes","cursorAdvanceMethods","transactionDoneMap","WeakMap","transformCache","reverseTransformCache","idbProxyTraps","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","replaceTraps","callback","wrapFunction","func","IDBCursor","prototype","advance","continue","continuePrimaryKey","includes","apply","unwrap","request","transformCachableValue","tx","done","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBDatabase","IDBObjectStore","IDBIndex","IDBRequest","success","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","storeName","transaction","store","index","shift","all","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","Symbol","asyncIterator","storageService","db","init","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","openDB","plantStore","createObjectStore","keyPath","createIndex","savePlant","plant","put","plants","getAllPlants","localStorage","setItem","JSON","stringify","getPlant","getAll","map","dateAdded","lastWatered","lastFertilized","images","img","timestamp","chatHistory","chatMessages","msg","notifications","notif","createdAt","deletePlant","saveImageBlob","imageId","plantId","blob","getImageBlob","saveSetting","getSetting","exportData","settings","theme","exportDate","toISOString","importData","jsonData","parse","entries","clearAllData","clear","removeItem","SettingsGroup_default","title","children","delay","jsxs","motion","div","initial","opacity","y","animate","transition","className","jsx","Switch","React.forwardRef","props","ref","SwitchPrimitives.Root","cn","SwitchPrimitives.Thumb","displayName","SettingsItem_default","icon","Icon","label","onClick","isLast","disabled","toggleState","onToggleChange","switchId","React","useId","content","Fragment","ChevronRight","checked","onCheckedChange","itemClasses","htmlFor","useDataExport","isExporting","setIsExporting","useState","formatDate","date","split","sanitizeForCSV","str","String","exportToJSON","plantCount","length","nickname","species","location","plantEnvironment","lightRequirements","healthScore","includeImages","profileImageUrl","includeChats","metadata","source","Blob","downloadFile","filename","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","format","headers","push","csvRows","join","row","csvContent","exportToCSV","getExportSize","estimatedSizeBytes","estimatedSizeMB","estimatedSize","toFixed","round","createAutoBackup","lastBackup","getItem","getTime","oneWeek","parseInt","toString","availableFormats","ExportModal","isOpen","onClose","setFormat","setIncludeImages","setIncludeChats","showSuccess","showError","useToast","AnimatePresence","scale","exit","e","stopPropagation","Download","X","Database","FileText","onChange","Image","MessageCircle","Info","Button","variant","toUpperCase","message","loading","iconMap","User","LogOut","Sun","Moon","Bell","Trash2","HelpCircle","Shield","Settings_default","settingsSections","isExportModalOpen","setIsExportModalOpen","isDark","toggleTheme","useThemeStore","signOut","profile","navigate","useNavigate","handleSignOut","window","confirm","handleExportData","handleClearData","useMemo","items","useSettings","section","SettingsGroup","item","itemIndex","IconComponent","SettingsItem"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,8,9]}