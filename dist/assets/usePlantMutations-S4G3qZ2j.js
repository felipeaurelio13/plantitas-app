var O=e=>{throw TypeError(e)};var E=(e,t,s)=>t.has(e)||O("Cannot "+s);var a=(e,t,s)=>(E(e,t,"read from private field"),s?s.call(e):t.get(e)),v=(e,t,s)=>t.has(e)?O("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,s),f=(e,t,s,r)=>(E(e,t,"write to private field"),r?r.call(e,s):t.set(e,s),s),P=(e,t,s)=>(E(e,t,"access private method"),s);import{U,V as _,W as Q,Y as R,Z as q,B as D,r as M,_ as k,$ as F,z as I,a0 as L,u as z}from"./index-CV3zzXnm.js";var y,m,l,c,p,C,w,K,A=(K=class extends U{constructor(t,s){super();v(this,p);v(this,y);v(this,m);v(this,l);v(this,c);f(this,y,t),this.setOptions(s),this.bindMethods(),P(this,p,C).call(this)}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(t){var r;const s=this.options;this.options=a(this,y).defaultMutationOptions(t),_(this.options,s)||a(this,y).getMutationCache().notify({type:"observerOptionsUpdated",mutation:a(this,l),observer:this}),s!=null&&s.mutationKey&&this.options.mutationKey&&Q(s.mutationKey)!==Q(this.options.mutationKey)?this.reset():((r=a(this,l))==null?void 0:r.state.status)==="pending"&&a(this,l).setOptions(this.options)}onUnsubscribe(){var t;this.hasListeners()||(t=a(this,l))==null||t.removeObserver(this)}onMutationUpdate(t){P(this,p,C).call(this),P(this,p,w).call(this,t)}getCurrentResult(){return a(this,m)}reset(){var t;(t=a(this,l))==null||t.removeObserver(this),f(this,l,void 0),P(this,p,C).call(this),P(this,p,w).call(this)}mutate(t,s){var r;return f(this,c,s),(r=a(this,l))==null||r.removeObserver(this),f(this,l,a(this,y).getMutationCache().build(a(this,y),this.options)),a(this,l).addObserver(this),a(this,l).execute(t)}},y=new WeakMap,m=new WeakMap,l=new WeakMap,c=new WeakMap,p=new WeakSet,C=function(){var s;const t=((s=a(this,l))==null?void 0:s.state)??R();f(this,m,{...t,isPending:t.status==="pending",isSuccess:t.status==="success",isError:t.status==="error",isIdle:t.status==="idle",mutate:this.mutate,reset:this.reset})},w=function(t){q.batch(()=>{var s,r,h,i,d,b,g,n;if(a(this,c)&&this.hasListeners()){const o=a(this,m).variables,u=a(this,m).context;(t==null?void 0:t.type)==="success"?((r=(s=a(this,c)).onSuccess)==null||r.call(s,t.data,o,u),(i=(h=a(this,c)).onSettled)==null||i.call(h,t.data,null,o,u)):(t==null?void 0:t.type)==="error"&&((b=(d=a(this,c)).onError)==null||b.call(d,t.error,o,u),(n=(g=a(this,c)).onSettled)==null||n.call(g,void 0,t.error,o,u))}this.listeners.forEach(o=>{o(a(this,m))})})},K);function S(e,t){const s=D(),[r]=M.useState(()=>new A(s,e));M.useEffect(()=>{r.setOptions(e)},[r,e]);const h=M.useSyncExternalStore(M.useCallback(d=>r.subscribe(q.batchCalls(d)),[r]),()=>r.getCurrentResult(),()=>r.getCurrentResult()),i=M.useCallback((d,b)=>{r.mutate(d,b).catch(k)},[r]);if(h.error&&F(r.options.throwOnError,[h.error]))throw h.error;return{...h,mutate:i,mutateAsync:h.mutate}}/**
 * @license lucide-react v0.411.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const B=I("Camera",[["path",{d:"M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z",key:"1tc9qg"}],["circle",{cx:"12",cy:"13",r:"3",key:"1vg3eu"}]]),H=()=>{const e=D(),{addPlant:t,updatePlant:s,deletePlant:r}=L.getState(),h=z(n=>n.user),i=h==null?void 0:h.id,d=S({mutationFn:n=>{if(!i)throw new Error("User not authenticated");const{imageDataUrl:o,location:u}=n;return t(o,u,i)},onSuccess:n=>{e.invalidateQueries({queryKey:["plants",i]})},onError:n=>{console.error("Failed to create plant:",n)}}),b=S({mutationFn:n=>{if(!i)throw new Error("User not authenticated");return s(n,i)},onMutate:async n=>{await e.cancelQueries({queryKey:["plants",i]});const o=e.getQueryData(["plants",i]);return o&&e.setQueryData(["plants",i],o.map(u=>u.id===n.id?n:u)),{previousPlants:o}},onError:(n,o,u)=>{u!=null&&u.previousPlants&&e.setQueryData(["plants",i],u.previousPlants)},onSettled:n=>{e.invalidateQueries({queryKey:["plants",i]})}}),g=S({mutationFn:n=>{if(!i)throw new Error("User not authenticated");return r(n,i)},onMutate:async n=>{await e.cancelQueries({queryKey:["plants",i]});const o=e.getQueryData(["plants",i]);return o&&e.setQueryData(["plants",i],o.filter(u=>u.id!==n)),{previousPlants:o}},onError:(n,o,u)=>{u!=null&&u.previousPlants&&e.setQueryData(["plants",i],u.previousPlants)},onSettled:()=>{e.invalidateQueries({queryKey:["plants",i]})}});return{createPlant:d.mutate,isCreatingPlant:d.isPending,updatePlant:b.mutate,isUpdatingPlant:b.isPending,deletePlant:g.mutate,isDeletingPlant:g.isPending}};export{B as C,S as a,H as u};
