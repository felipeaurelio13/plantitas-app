import React, { Suspense, lazy, useEffect, useState } from 'react';
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from 'react-router-dom';
import { useAuthStore } from './stores/useAuthStore';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { Toaster } from 'sonner';
import { ToastProvider as NewToastProvider } from './components/ui/Toast/ToastProvider';
import { ToastProvider } from './components/ui/Toast';
import { usePerformanceMonitoring } from './hooks/usePerformanceMonitoring';
import { initViewportFix, getMobileDeviceInfo } from './utils/mobileViewport';
import { MobileDebugPanel } from './components/MobileDebugPanel';
import { logCriticalError } from './utils/mobileDebugAdvanced';

import Layout from './components/Layout';
import ErrorBoundary from './components/ErrorBoundary';
import { routes } from './lib/navigation';
import { PERFORMANCE_CONFIG } from './lib/performance';
import { Leaf } from 'lucide-react';

// Importaciones directas para p치ginas core (mejor UX)
import Dashboard from './pages/Dashboard';
import PlantDetail from './pages/PlantDetail';
import CameraPage from './pages/Camera';
import ChatPage from './pages/Chat';
import GardenChatPage from './pages/GardenChat';

// Lazy loading solo para p치ginas secundarias
const Settings = lazy(() => import('./pages/Settings'));
const AuthPage = lazy(() => import('./pages/Auth'));

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: PERFORMANCE_CONFIG.QUERY.STALE_TIME.MEDIUM,
      gcTime: PERFORMANCE_CONFIG.QUERY.GC_TIME.MEDIUM,
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
      retry: PERFORMANCE_CONFIG.QUERY.RETRY.COUNT,
      retryDelay: attemptIndex => Math.min(PERFORMANCE_CONFIG.QUERY.RETRY.DELAY * 2 ** attemptIndex, 30000),
    },
    mutations: {
      retry: PERFORMANCE_CONFIG.QUERY.RETRY.COUNT,
      retryDelay: PERFORMANCE_CONFIG.QUERY.RETRY.DELAY,
    },
  },
});

const FullScreenLoader: React.FC<{ message: string }> = ({ message }) => (
  <div className="flex flex-col items-center justify-center h-screen bg-background text-foreground">
    <Leaf className="w-12 h-12 text-green-500 animate-bounce mb-4" />
    <p className="text-lg text-muted-foreground">{message}</p>
  </div>
);

// Smart basename detection para mobile compatibility
const getBasename = (): string => {
  console.log('[ROUTER] Detecting basename...');
  console.log('[ROUTER] Hostname:', window.location.hostname);
  console.log('[ROUTER] Pathname:', window.location.pathname);
  
  // Local development
  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    console.log('[ROUTER] Local development detected, using "/"');
    return '/';
  }
  
  // GitHub Pages detection
  if (window.location.pathname.startsWith('/plantitas-app')) {
    console.log('[ROUTER] GitHub Pages detected, using "/plantitas-app/"');
    return '/plantitas-app/';
  }
  
  // Fallback
  console.log('[ROUTER] Using fallback basename "/"');
  return '/';
};

const App: React.FC = () => {
  const { session, isInitialized, initialize } = useAuthStore();
  
  console.log('[APP] App component mounting...');
  console.log('[APP] Session:', !!session);
  console.log('[APP] Initialized:', isInitialized);
  
  // 游뚿 EMERGENCY FALLBACK STATE
  const [hasError, setHasError] = useState(false);
  
  // Monitoreo de performance en desarrollo
  usePerformanceMonitoring();

  useEffect(() => {
    console.log('[APP] useEffect running...');
    
    try {
      // Initialize viewport fix for mobile compatibility
      const cleanupViewport = initViewportFix();
      
      // Log mobile device info for debugging
      if (import.meta.env.DEV) {
        console.log('[Mobile Debug]', getMobileDeviceInfo());
      }
      
      // The initialize function is now async and handles its own lifecycle.
      console.log('[APP] Calling initialize...');
      initialize();
      console.log('[APP] Initialize called');
      
      return () => {
        console.log('[APP] Cleanup running...');
        cleanupViewport();
      };
    } catch (error) {
      logCriticalError('APP_INITIALIZATION', error);
      throw error;
    }
  }, [initialize]);

  // 游뚿 EMERGENCY FIX: Timeout para auth initialization
  const [forceRender, setForceRender] = useState(false);
  
  useEffect(() => {
    // Si despu칠s de 3 segundos no se inicializa, forzar render
    const emergencyTimeout = setTimeout(() => {
      if (!isInitialized) {
        console.warn('[APP] Emergency timeout - forcing app render');
        setForceRender(true);
      }
    }, 3000);
    
    return () => clearTimeout(emergencyTimeout);
  }, [isInitialized]);

  if (!isInitialized && !forceRender) {
    console.log('[APP] Not initialized, showing loader...');
    return <FullScreenLoader message="Inicializando..." />;
  }
  
  console.log('[APP] Rendering app (initialized:', isInitialized, 'forced:', forceRender, ')');
  console.log('[APP] Session status:', { hasSession: !!session, hasUser: !!session?.user });

  // 游뚿 DEFENSIVE RENDERING: Si fue forzado sin session, mostrar Auth directamente
  if (forceRender && !isInitialized && !session) {
    console.log('[APP] Force render without session - showing Auth');
    return (
      <QueryClientProvider client={queryClient}>
        <NewToastProvider>
          <ToastProvider>
            <ErrorBoundary>
              <Router 
                basename={getBasename()}
                future={{
                  v7_startTransition: true,
                  v7_relativeSplatPath: true,
                }}
              >
                <Toaster position="top-center" richColors />
                <MobileDebugPanel />
                <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50">
                  <AuthPage />
                </div>
              </Router>
            </ErrorBoundary>
          </ToastProvider>
        </NewToastProvider>
      </QueryClientProvider>
    );
  }

  const PrivateRoutes = () => {
    console.log('[APP] Rendering PrivateRoutes...');
    return (
      <Routes>
        <Route path="/" element={<Layout />}>
          {/* Main Routes */}
          <Route index element={<Dashboard />} />
          <Route path="camera" element={<CameraPage />} />
          <Route path="settings" element={<Settings />} />
          
          {/* Chat Routes - Clearly separated */}
          <Route path="garden-chat" element={<GardenChatPage />} />
        
        {/* Plant Routes */}
        <Route path="plant/:plantId" element={<PlantDetail />} />
        <Route path="plant/:plantId/chat" element={<ChatPage />} />
        
        {/* Catch all - redirect to dashboard with replace to avoid history pollution */}
        <Route path="*" element={<Navigate to={routes.dashboard} replace />} />
      </Route>
    </Routes>
  );

  // 游뚿 EMERGENCY FALLBACK: Si hay error cr칤tico, mostrar fallback simple
  if (hasError) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="text-center p-8">
          <h1 className="text-2xl font-bold text-red-600 mb-4">Error Cr칤tico</h1>
          <p className="text-gray-600 mb-4">La aplicaci칩n encontr칩 un error inesperado</p>
          <button 
            onClick={() => window.location.reload()} 
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Recargar P치gina
          </button>
        </div>
      </div>
    );
  }

  try {
    console.log('[APP] Rendering main app structure...');
    return (
      <QueryClientProvider client={queryClient}>
        <NewToastProvider>
          <ToastProvider>
            <ErrorBoundary>
              <Router 
                basename={getBasename()}
                future={{
                  v7_startTransition: true,
                  v7_relativeSplatPath: true,
                }}
              >
                <Toaster position="top-center" richColors />
                <MobileDebugPanel />
                <Suspense fallback={<FullScreenLoader message="Cargando..." />}>
                  <Routes>
                    <Route
                      path={routes.auth}
                      element={(() => {
                        try {
                          console.log('[ROUTER] Auth route - session:', !!session);
                          return !session ? <AuthPage /> : <Navigate to={routes.dashboard} replace />;
                        } catch (error) {
                          console.error('[ROUTER] Auth route error:', error);
                          return <div className="p-4 text-red-500">Error en Auth: {String(error)}</div>;
                        }
                      })()}
                    />
                    <Route
                      path="/*"
                      element={(() => {
                        try {
                          console.log('[ROUTER] Main route - session:', !!session);
                          if (session) {
                            console.log('[ROUTER] Rendering PrivateRoutes');
                            return <PrivateRoutes />;
                          } else {
                            console.log('[ROUTER] No session, redirecting to auth');
                            return <Navigate to={routes.auth} replace />;
                          }
                        } catch (error) {
                          console.error('[ROUTER] Main route error:', error);
                          return <div className="p-4 text-red-500">Error en Router: {String(error)}</div>;
                        }
                      })()}
                    />
                  </Routes>
                </Suspense>
              </Router>
            </ErrorBoundary>
            </ToastProvider>
          </NewToastProvider>
        </QueryClientProvider>
      );
  } catch (error) {
    console.error('[APP] Critical render error:', error);
    setHasError(true);
    return null;
  }
};

export default App;